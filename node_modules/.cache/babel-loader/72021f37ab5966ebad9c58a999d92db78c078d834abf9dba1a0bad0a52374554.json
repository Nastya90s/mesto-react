{"ast":null,"code":"class Api {\n  constructor(_ref) {\n    let {\n      baseUrl,\n      headers\n    } = _ref;\n    this._baseUrl = baseUrl;\n    this._headers = headers;\n    this._checkResponse = res => {\n      if (res.ok) {\n        return res.json();\n      }\n      return Promise.reject(`Ошибка: ${res.status}`);\n    };\n  }\n  getUserInfo() {\n    return fetch(this._baseUrl + '/users/me', {\n      method: 'Get',\n      headers: this._headers\n    }).then(this._checkResponse);\n  }\n  getInitialCards() {\n    return fetch(this._baseUrl + '/cards', {\n      method: 'Get',\n      headers: this._headers\n    }).then(this._checkResponse);\n  }\n  saveNewUserInfo(userData) {\n    return fetch(this._baseUrl + '/users/me', {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: userData.title,\n        about: userData.subtitle\n      })\n    }).then(this._checkResponse);\n  }\n  saveNewUserAvatar(userData) {\n    return fetch(this._baseUrl + '/users/me/avatar', {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: userData.avatar\n      })\n    }).then(this._checkResponse);\n  }\n  sendNewCard(inputValues) {\n    return fetch(this._baseUrl + '/cards', {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: inputValues.place,\n        link: inputValues.src\n      })\n    }).then(this._checkResponse);\n  }\n  removeCard(cardId) {\n    return fetch(this._baseUrl + '/cards/' + cardId, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(this._checkResponse);\n  }\n  addLike(cardId) {\n    return fetch(this._baseUrl + '/cards/' + cardId + '/likes', {\n      method: 'PUT',\n      headers: this._headers\n    }).then(this._checkResponse);\n  }\n  removeLike(cardId) {\n    return fetch(this._baseUrl + '/cards/' + cardId + '/likes', {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(this._checkResponse);\n  }\n}\nconst api = new Api({\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-54',\n  headers: {\n    authorization: '94b9605b-5472-447a-96bc-8a72a81051a5',\n    'Content-Type': 'application/json'\n  }\n});\nexport default api;","map":{"version":3,"names":["Api","constructor","baseUrl","headers","_baseUrl","_headers","_checkResponse","res","ok","json","Promise","reject","status","getUserInfo","fetch","method","then","getInitialCards","saveNewUserInfo","userData","body","JSON","stringify","name","title","about","subtitle","saveNewUserAvatar","avatar","sendNewCard","inputValues","place","link","src","removeCard","cardId","addLike","removeLike","api","authorization"],"sources":["/Users/macbookpro15/Desktop/mesto-react/mesto-react/mesto-react/src/utils/api.js"],"sourcesContent":["  class Api {\n    constructor({ baseUrl, headers }) { \n      this._baseUrl = baseUrl;\n      this._headers = headers;\n  \n      this._checkResponse = (res) => {\n        if (res.ok) {\n          return res.json();\n        }\n        return Promise.reject(`Ошибка: ${res.status}`);\n      };\n    }\n  \n    getUserInfo() {\n      return fetch(this._baseUrl + '/users/me', {\n        method: 'Get',\n        headers: this._headers,\n      }).then(this._checkResponse);\n    }\n  \n    getInitialCards() {\n      return fetch(this._baseUrl + '/cards', {\n        method: 'Get',\n        headers: this._headers, \n    })\n      .then(this._checkResponse);\n    }\n  \n    saveNewUserInfo(userData) {\n      return fetch(this._baseUrl + '/users/me', {\n        method: 'PATCH',\n        headers: this._headers,\n        body: JSON.stringify({\n          name: userData.title,\n          about: userData.subtitle\n        })})\n        .then(this._checkResponse);\n    }\n  \n    saveNewUserAvatar(userData) {\n    return fetch(this._baseUrl + '/users/me/avatar', {\n        method: 'PATCH',\n        headers: this._headers,\n        body: JSON.stringify({\n          avatar: userData.avatar\n        })})\n        .then(this._checkResponse);\n    }\n  \n    sendNewCard(inputValues) {\n      return fetch(this._baseUrl + '/cards', {\n        method: 'POST',\n        headers: this._headers,\n        body: JSON.stringify({\n          name: inputValues.place,\n          link: inputValues.src,\n        })})\n        .then(this._checkResponse);\n    }\n  \n    removeCard(cardId) {\n      return fetch(this._baseUrl + '/cards/' + cardId, {\n        method: 'DELETE',\n        headers: this._headers,\n        })\n        .then(this._checkResponse);\n    }\n  \n    addLike(cardId) {\n      return fetch(this._baseUrl + '/cards/' + cardId + '/likes', {\n        method: 'PUT',\n        headers: this._headers,\n        })\n        .then(this._checkResponse);\n    }\n  \n    removeLike(cardId) {\n      return fetch(this._baseUrl + '/cards/' + cardId + '/likes', {\n        method: 'DELETE',\n        headers: this._headers,\n        })\n        .then(this._checkResponse);\n    }\n  }\n\n  const api = new Api({\n    baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-54',\n    headers: {\n      authorization: '94b9605b-5472-447a-96bc-8a72a81051a5',\n      'Content-Type': 'application/json'\n    }\n  });\n\n\n  export default api;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}